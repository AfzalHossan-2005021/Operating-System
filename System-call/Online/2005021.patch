diff --git a/Makefile b/Makefile
index 62fd0f8..c15ae6c 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_seed\
+	$U/_next\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..685eaf6 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            setSeed(int);
+int             getNextRand(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..7b9390f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -20,6 +20,8 @@ static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
 
+int seed_val = 0;
+
 // helps ensure that wakeups of wait()ing
 // parents are not lost. helps obey the
 // memory model when using p->parent.
@@ -686,3 +688,12 @@ procdump(void)
     printf("\n");
   }
 }
+
+void setSeed(int seed){
+  seed_val = seed;
+}
+
+int getNextRand(){
+  seed_val++;
+  return seed_val;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..7bef333 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setSeed(void);
+extern uint64 sys_getRandomNumbers(void);
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setSeed] sys_setSeed,
+[SYS_getRandomNumbers] sys_getRandomNumbers,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4f48ab1 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setSeed 22
+#define SYS_getRandomNumbers 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..799413f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setSeed(void)
+{
+  int n;
+  argint(0, &n);
+  setSeed(n);
+  return 0;
+}
+
+uint64
+sys_getRandomNumbers(void)
+{
+  int n;
+  uint64 addr;
+  argint(0, &n);
+  argaddr(1, &addr);
+  int *arr = (int *)kalloc();
+  for(int i = 0; i < n; i++)
+    arr[i] = getNextRand();
+  int result = copyout(myproc()->pagetable, addr, (char *)arr, n * sizeof(int));
+  kfree((void *)arr);
+  return result;
+}
\ No newline at end of file
diff --git a/user/next.c b/user/next.c
new file mode 100644
index 0000000..abf2191
--- /dev/null
+++ b/user/next.c
@@ -0,0 +1,32 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char **argv)
+{
+  int i, n, *arr;
+  if (argc < 2)
+  {
+    fprintf(2, "usage: next <count>...\n");
+    exit(1);
+  }
+  n = atoi(argv[1]);
+
+  arr = (int *)malloc(n * sizeof(int));
+
+  if (getRandomNumbers(n, arr) < 0)
+  {
+    fprintf(2, "Error: failed to get random numbers\n");
+    exit(1);
+  }
+
+  fprintf(2, "Next random numbers are [");
+  for (i = 0; i < n - 1; i++)
+  {
+    fprintf(2, "%d, ", arr[i]);
+  }
+  fprintf(2, "%d", arr[i]);
+  fprintf(2, "]\n");
+
+  exit(0);
+}
diff --git a/user/seed.c b/user/seed.c
new file mode 100644
index 0000000..e433acf
--- /dev/null
+++ b/user/seed.c
@@ -0,0 +1,22 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char **argv)
+{
+  int n;
+
+  if (argc < 2)
+  {
+    fprintf(2, "usage: seed <seed>...\n");
+    exit(1);
+  }
+
+  n = atoi(argv[1]);
+
+  setSeed(n);
+
+  fprintf(2, "The seed has been set to %d\n", n);
+
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 04013ca..70d1b07 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int setSeed(int seed);
+int getRandomNumbers(int n, int*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..787a8cd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setSeed");
+entry("getRandomNumbers");
