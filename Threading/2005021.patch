diff --git a/Makefile b/Makefile
index 62fd0f8..2a8af61 100644
--- a/Makefile
+++ b/Makefile
@@ -56,7 +56,7 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -Og -fno-omit-frame-pointer -ggdb -gdwarf-2 -g3
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 # CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
@@ -135,6 +135,7 @@ UPROGS=\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_threads\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..7521326 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -77,7 +77,7 @@ int             piperead(struct pipe*, uint64, int);
 int             pipewrite(struct pipe*, uint64, int);
 
 // printf.c
-int            printf(char*, ...) __attribute__ ((format (printf, 1, 2)));
+int             printf(char*, ...) __attribute__ ((format (printf, 1, 2)));
 void            panic(char*) __attribute__((noreturn));
 void            printfinit(void);
 
@@ -106,6 +106,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(uint64, uint64, uint64);
+int             thread_join(int);
+void            thread_exit(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,6 +168,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..630b206 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -13,7 +13,9 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int nextmemid = 1;
 struct spinlock pid_lock;
+struct spinlock memid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -50,11 +52,12 @@ procinit(void)
   struct proc *p;
   
   initlock(&pid_lock, "nextpid");
+  initlock(&memid_lock, "memid_lock");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-      p->state = UNUSED;
-      p->kstack = KSTACK((int) (p - proc));
+    initlock(&p->lock, "proc");
+    p->state = UNUSED;
+    p->kstack = KSTACK((int) (p - proc));
   }
 }
 
@@ -102,12 +105,25 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int memid;
+  
+  acquire(&memid_lock);
+  memid = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&memid_lock);
+
+  return memid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
 static struct proc*
-allocproc(void)
+allocproc(int is_thread)
 {
   struct proc *p;
 
@@ -123,6 +139,13 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  if(!is_thread){
+    p->memlock = (struct spinlock *)kalloc();
+    p->mem_id = allocmemid();
+    p->is_thread = 0;
+    initlock(p->memlock, "memlock");
+  }
+
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -155,10 +178,14 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
+  if(p->trapframe && !p->is_thread){
     kfree((void*)p->trapframe);
+  }
+  if(p->memlock && !p->is_thread){
+    kfree((void*)p->memlock);
+  }
   p->trapframe = 0;
-  if(p->pagetable)
+  if(p->pagetable && !p->is_thread)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
@@ -169,6 +196,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->is_thread = 0;
+  p->mem_id = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -234,7 +263,7 @@ userinit(void)
 {
   struct proc *p;
 
-  p = allocproc();
+  p = allocproc(0);
   initproc = p;
   
   // allocate one user page and copy initcode's instructions
@@ -262,15 +291,28 @@ growproc(int n)
   uint64 sz;
   struct proc *p = myproc();
 
+  acquire(p->memlock);
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(p->memlock);
       return -1;
     }
   } else if(n < 0){
+    printf("demalloc\n");
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+  // printf("growproc: pid = %d\n", p->pid);
+  for(struct proc *tp = proc; tp < &proc[NPROC]; tp++) {
+    if(tp != p && tp->mem_id == p->mem_id) {
+      uvmmirror(p->pagetable, tp->pagetable, p->sz, tp->sz);
+      // printf("growproc pid: %d,  mirror: pid = %d\n", p->pid, tp->pid);
+      tp->sz = p->sz;
+    }
+  }
+  release(p->memlock);
+  
   return 0;
 }
 
@@ -284,7 +326,7 @@ fork(void)
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if((np = allocproc(0)) == 0){
     return -1;
   }
 
@@ -686,3 +728,154 @@ procdump(void)
     printf("\n");
   }
 }
+
+// thread_create
+int
+thread_create(uint64 fcn_ptr, uint64 arg_ptr, uint64 stack_ptr)
+{
+  int pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc(1)) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz, 0) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Set up new trapframe to start executing at fcn_ptr
+  np->trapframe->epc = fcn_ptr;
+
+  // Set up new argument
+  np->trapframe->a0 = arg_ptr;
+
+  // Set up new stack pointer
+  // stack_ptr is a pointer to memory chunk of size PGSIZE
+  // stack grows downwards but stack_ptr points to the start of the memory chunk
+  // stack_ptr + PGSIZE is the top of the stack
+  np->trapframe->sp = stack_ptr + PGSIZE;
+
+  // Uses a fake return PC (MAXVA)
+  np->trapframe->ra = MAXVA;
+
+  // increment reference counts on open file descriptors.
+  for(int i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+  np->is_thread = 1;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  np->memlock = p->memlock;
+  np->mem_id = p->mem_id;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+// thread_join
+int
+thread_join(int pid)
+{
+  struct proc *p;
+  int havethreads;
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havethreads = 0;
+    for(p = proc; p < &proc[NPROC]; p++){
+      if(p->parent == myproc()){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&p->lock);
+        if(p->pid == pid && p->is_thread){
+          // Found one.
+          havethreads = 1;
+          if(p->state == ZOMBIE){
+            freeproc(p);
+            release(&p->lock);
+            release(&wait_lock);
+            return pid;
+          }
+        }
+        release(&p->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havethreads || killed(myproc())){
+      release(&wait_lock);
+      return -1;
+    }
+    // Wait for a child to exit.
+    sleep(myproc(), &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+// thread_exit
+void
+thread_exit(void)
+{
+  struct proc *p = myproc();
+  if(p->is_thread == 0)
+    panic("thread_exit called by a process");
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+  
+  acquire(&p->lock);
+
+  p->xstate = 0;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..b7e141b 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct spinlock *memlock; // find places to set and release the locks
+  int is_thread;           // if it is thread
+  int mem_id;              // All threads will have the same physical pages with the mem_id
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ad82298 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_yield_cpu(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +130,10 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_yield_cpu] sys_yield_cpu,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..294d62e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_yield_cpu 25
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..5b55142 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,42 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// Create a new thread
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn_ptr;
+  uint64 arg_ptr;
+  uint64 stack_ptr;
+
+  argaddr(0, &fcn_ptr);
+  argaddr(1, &arg_ptr);
+  argaddr(2, &stack_ptr);
+  return thread_create(fcn_ptr, arg_ptr, stack_ptr);
+}
+
+// Join a thread
+uint64
+sys_thread_join(void)
+{
+  int tid;
+  argint(0, &tid);
+  return thread_join(tid);
+}
+
+// Exit a thread
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+}
+
+// Yield the CPU
+uint64
+sys_yield_cpu(void)
+{
+  yield();
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..53a4ff9 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -262,9 +262,11 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 uint64
 uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
 {
+  printf("uvmdealloc: oldsz");
   if(newsz >= oldsz)
     return oldsz;
 
+
   if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
     uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
@@ -339,6 +341,46 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t parent, pagetable_t thread, uint64 end_sz, uint64 start_sz)
+{
+  pte_t *pte;
+  // Align the sizes to the next page
+  start_sz = PGROUNDUP(start_sz);
+  end_sz = PGROUNDUP(end_sz);
+
+  // Start at the beginning of the virtual address space
+  uint64 va = start_sz;
+
+  // Check if the end size is less than the start size
+  if(end_sz < start_sz){
+    // Unmap the pages that have been mapped
+    int npages = (start_sz - end_sz) / PGSIZE;
+    uvmunmap(thread, end_sz, npages, 0);
+    return 0;
+  }
+
+  // Iterate through the virtual address space
+  while(va < end_sz){
+    // Check if the page table entry exists
+    if((pte = walk(parent, va, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    // Check if the page is present (valid)
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present(valid)");
+    // Map page of the parent page table to the thread page table
+    if(mappages(thread, va, PGSIZE, PTE2PA(*pte), PTE_FLAGS(*pte)) != 0){
+      // Unmap the pages that have been mapped
+      int npages = (va - start_sz) / PGSIZE;
+      uvmunmap(thread, start_sz, npages, 0);
+      return -1;
+    }
+    // Move to the next page
+    va += PGSIZE;
+  }
+  return 0;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/mutexlock.h b/user/mutexlock.h
new file mode 100644
index 0000000..775cd27
--- /dev/null
+++ b/user/mutexlock.h
@@ -0,0 +1,5 @@
+#include "kernel/types.h"
+
+struct thread_mutex{
+    uint locked;
+};
\ No newline at end of file
diff --git a/user/printf.c b/user/printf.c
index 8178746..31f9903 100644
--- a/user/printf.c
+++ b/user/printf.c
@@ -1,6 +1,7 @@
 #include "kernel/types.h"
 #include "kernel/stat.h"
 #include "user/user.h"
+#include "user/mutexlock.h"
 
 #include <stdarg.h>
 
@@ -15,6 +16,7 @@ putc(int fd, char c)
 static void
 printint(int fd, int xx, int base, int sgn)
 {
+  
   char buf[16];
   int i, neg;
   uint x;
@@ -151,7 +153,6 @@ void
 printf(const char *fmt, ...)
 {
   va_list ap;
-
   va_start(ap, fmt);
   vprintf(1, fmt, ap);
 }
diff --git a/user/spinlock.h b/user/spinlock.h
new file mode 100644
index 0000000..b6f3e82
--- /dev/null
+++ b/user/spinlock.h
@@ -0,0 +1,5 @@
+#include "kernel/types.h"
+
+struct thread_spinlock {
+    uint locked;
+};
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..b01217d
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,115 @@
+#define USE_SPINLOCK
+// #define USE_MUTEXLOCK
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/spinlock.h"
+#include "user/mutexlock.h"
+
+#define PGSIZE 4096 // 4096 is the PGSIZE defined in kernel/riscv.h
+
+struct thread_mutex print_lock;
+// struct thread_mutex mem_lock;
+
+#ifdef USE_SPINLOCK
+struct thread_spinlock lock;
+#endif
+
+#ifdef USE_MUTEXLOCK
+struct thread_mutex mlock;
+#endif
+
+void init_locks(){
+    thread_mutex_init(&print_lock);
+    // thread_mutex_init(&mem_lock);
+#ifdef USE_SPINLOCK
+    thread_spin_init(&lock);
+#endif
+#ifdef USE_MUTEXLOCK
+    thread_mutex_init(&mlock);
+#endif
+}
+
+struct thread_mutex print_lock;
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+    unsigned int i;
+    for (i = 0; i < d; i++) {
+        __asm volatile("nop" :::);
+    }
+    return i;
+}
+
+void do_work(void *arg) {
+    int i;
+    int old;
+
+    struct balance *b = (struct balance *)arg;
+
+    thread_mutex_lock(&print_lock);
+    printf("Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&print_lock);
+
+    for (i = 0; i < b->amount; i++) {
+#ifdef USE_SPINLOCK
+        thread_spin_lock(&lock);
+#endif
+#ifdef USE_MUTEXLOCK
+        thread_mutex_lock(&mlock);
+#endif
+        old = total_balance;
+        delay(10);
+        if (old != total_balance) {
+            printf("We missed an update. old: %d, total_balance: %d\n", old, total_balance);
+        }
+        total_balance = old + 1;
+#ifdef USE_SPINLOCK
+        thread_spin_unlock(&lock);
+#endif
+#ifdef USE_MUTEXLOCK
+        thread_mutex_unlock(&mlock);
+#endif
+    }
+
+    thread_mutex_lock(&print_lock);
+    printf("Done s:%s\n", b->name);
+    thread_mutex_unlock(&print_lock);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+    init_locks();
+
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+
+    s1 = malloc(PGSIZE); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(PGSIZE);
+
+    thread1 = thread_create(do_work, (void *)&b1, s1);
+    thread2 = thread_create(do_work, (void *)&b2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+           thread1, r1, thread2, r2, total_balance);
+
+    free(s1);
+    free(s2);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/ulib.c b/user/ulib.c
index c7b66c4..464e882 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -2,6 +2,8 @@
 #include "kernel/stat.h"
 #include "kernel/fcntl.h"
 #include "user/user.h"
+#include "user/spinlock.h"
+#include "user/mutexlock.h"
 
 //
 // wrapper so that it's OK if main() does not call exit().
@@ -145,3 +147,33 @@ memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
 }
+
+void thread_spin_init(struct thread_spinlock *lk){
+  lk->locked = 0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk){
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+}
+
+void thread_spin_unlock(struct thread_spinlock *lk){
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+
+void thread_mutex_init(struct thread_mutex *m){
+  m->locked = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *m){
+  while(__sync_lock_test_and_set(&m->locked, 1) != 0){
+    yield_cpu();
+  }
+  __sync_synchronize();
+}
+
+void thread_mutex_unlock(struct thread_mutex *m){
+  __sync_synchronize();
+  __sync_lock_release(&m->locked);
+}
\ No newline at end of file
diff --git a/user/umalloc.c b/user/umalloc.c
index 2092a32..4d80148 100644
--- a/user/umalloc.c
+++ b/user/umalloc.c
@@ -22,8 +22,7 @@ static Header base;
 static Header *freep;
 
 void
-free(void *ap)
-{
+free(void *ap){
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
diff --git a/user/user.h b/user/user.h
index 04013ca..0b0a138 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,6 @@
 struct stat;
+struct thread_spinlock;
+struct thread_mutex;
 
 // system calls
 int fork(void);
@@ -22,6 +24,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *, void *);
+int thread_join(int);
+void thread_exit(void);
+void yield_cpu(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +45,9 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+void thread_spin_init(struct thread_spinlock *lk);
+void thread_spin_lock(struct thread_spinlock *lk);
+void thread_spin_unlock(struct thread_spinlock *lk);
+void thread_mutex_init(struct thread_mutex *m);
+void thread_mutex_lock(struct thread_mutex *m);
+void thread_mutex_unlock(struct thread_mutex *m);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..076941b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("yield_cpu");
